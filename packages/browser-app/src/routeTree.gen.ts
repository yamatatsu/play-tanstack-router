/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as SiteSiteIdImport } from './routes/site.$siteId'
import { Route as SiteSiteIdIndexImport } from './routes/site.$siteId/index'

// Create Virtual Routes

const SiteSiteIdRecordLazyImport = createFileRoute('/site/$siteId/record')()
const SiteSiteIdDashboardIndexLazyImport = createFileRoute(
  '/site/$siteId/dashboard/',
)()
const SiteSiteIdDashboardEquipmentStatusLazyImport = createFileRoute(
  '/site/$siteId/dashboard/equipment-status',
)()

// Create/Update Routes

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SiteSiteIdRoute = SiteSiteIdImport.update({
  path: '/site/$siteId',
  getParentRoute: () => rootRoute,
} as any)

const SiteSiteIdIndexRoute = SiteSiteIdIndexImport.update({
  path: '/',
  getParentRoute: () => SiteSiteIdRoute,
} as any)

const SiteSiteIdRecordLazyRoute = SiteSiteIdRecordLazyImport.update({
  path: '/record',
  getParentRoute: () => SiteSiteIdRoute,
} as any).lazy(() =>
  import('./routes/site.$siteId/record.lazy').then((d) => d.Route),
)

const SiteSiteIdDashboardIndexLazyRoute =
  SiteSiteIdDashboardIndexLazyImport.update({
    path: '/dashboard/',
    getParentRoute: () => SiteSiteIdRoute,
  } as any).lazy(() =>
    import('./routes/site.$siteId/dashboard.index.lazy').then((d) => d.Route),
  )

const SiteSiteIdDashboardEquipmentStatusLazyRoute =
  SiteSiteIdDashboardEquipmentStatusLazyImport.update({
    path: '/dashboard/equipment-status',
    getParentRoute: () => SiteSiteIdRoute,
  } as any).lazy(() =>
    import('./routes/site.$siteId/dashboard.equipment-status.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/site/$siteId': {
      id: '/site/$siteId'
      path: '/site/$siteId'
      fullPath: '/site/$siteId'
      preLoaderRoute: typeof SiteSiteIdImport
      parentRoute: typeof rootRoute
    }
    '/site/$siteId/record': {
      id: '/site/$siteId/record'
      path: '/record'
      fullPath: '/site/$siteId/record'
      preLoaderRoute: typeof SiteSiteIdRecordLazyImport
      parentRoute: typeof SiteSiteIdImport
    }
    '/site/$siteId/': {
      id: '/site/$siteId/'
      path: '/'
      fullPath: '/site/$siteId/'
      preLoaderRoute: typeof SiteSiteIdIndexImport
      parentRoute: typeof SiteSiteIdImport
    }
    '/site/$siteId/dashboard/equipment-status': {
      id: '/site/$siteId/dashboard/equipment-status'
      path: '/dashboard/equipment-status'
      fullPath: '/site/$siteId/dashboard/equipment-status'
      preLoaderRoute: typeof SiteSiteIdDashboardEquipmentStatusLazyImport
      parentRoute: typeof SiteSiteIdImport
    }
    '/site/$siteId/dashboard/': {
      id: '/site/$siteId/dashboard/'
      path: '/dashboard'
      fullPath: '/site/$siteId/dashboard'
      preLoaderRoute: typeof SiteSiteIdDashboardIndexLazyImport
      parentRoute: typeof SiteSiteIdImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  SiteSiteIdRoute: SiteSiteIdRoute.addChildren({
    SiteSiteIdRecordLazyRoute,
    SiteSiteIdIndexRoute,
    SiteSiteIdDashboardEquipmentStatusLazyRoute,
    SiteSiteIdDashboardIndexLazyRoute,
  }),
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/site/$siteId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/site/$siteId": {
      "filePath": "site.$siteId.tsx",
      "children": [
        "/site/$siteId/record",
        "/site/$siteId/",
        "/site/$siteId/dashboard/equipment-status",
        "/site/$siteId/dashboard/"
      ]
    },
    "/site/$siteId/record": {
      "filePath": "site.$siteId/record.lazy.tsx",
      "parent": "/site/$siteId"
    },
    "/site/$siteId/": {
      "filePath": "site.$siteId/index.tsx",
      "parent": "/site/$siteId"
    },
    "/site/$siteId/dashboard/equipment-status": {
      "filePath": "site.$siteId/dashboard.equipment-status.lazy.tsx",
      "parent": "/site/$siteId"
    },
    "/site/$siteId/dashboard/": {
      "filePath": "site.$siteId/dashboard.index.lazy.tsx",
      "parent": "/site/$siteId"
    }
  }
}
ROUTE_MANIFEST_END */
